{"version":3,"sources":["app.js","helper-test.js"],"names":[],"mappings":"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","file":"public/main.js","sourcesContent":["let Sherlock = {\n  init() {\n    this.search = instantsearch({\n      appId: 'O3F8QXYK6R',\n      apiKey: '315734cd612e89d2c548256293799f0c',\n      indexName: 'gutenberg'\n      // searchParameters: {\n      //   distinct: 10\n      // }\n    });\n\n    this.addSearchBoxWidget();\n    this.addStatsWidget();\n    this.addClearAllWidget();\n    this.addBookWidget();\n    this.addChapterWidget();\n    this.addHitsWidget();\n    this.addPaginationWidget();\n\n    this.search.start();\n\n    $('#q').focus();\n  },\n  // Simplify hits to be used in a Hogan template. Merge sequential elements\n  // into one.\n  transformAllHits(data) {\n    let hits = [];\n    let previousHit = {nextId: null};\n    _.each(data.hits, (hit) => {\n      // Context\n      let previous = hit.context.previous ? hit.context.previous.content : null;\n      let next = hit.context.next ? hit.context.next.content : null;\n      let nextID = hit.context.next ? hit.context.next.objectID : null;\n      // Content\n      let content = Sherlock.getHighlightedValue(hit, 'content');\n      // Book and chapter\n      let book = hit.book;\n      let chapter = hit.chapterName;\n\n      // This hit is directly following the previous one, so we just update the\n      // previous one\n      if (hit.objectID === previousHit.nextID) {\n        previousHit.content.push(content);\n        previousHit.nextID = nextID;\n        previousHit.next = next;\n        return;\n      }\n\n      let cleanHit = {\n        previous,\n        content: [content],\n        next,\n        nextID,\n        book,\n        chapter\n      };\n      previousHit = cleanHit;\n\n      hits.push(cleanHit);\n    });\n\n    data.hits = hits;\n    return data;\n  },\n  getHighlightedValue(object, property) {\n    if (!_.has(object, `_highlightResult.${property}.value`)) {\n      console.info(object, property);\n      return object[property];\n    }\n    return object._highlightResult[property].value;\n  },\n  addSearchBoxWidget() {\n    this.search.addWidget(\n      instantsearch.widgets.searchBox({\n        container: '#q',\n        placeholder: 'Search in all Sherlock Holmes books'\n      })\n    );\n  },\n  addStatsWidget() {\n    this.search.addWidget(\n      instantsearch.widgets.stats({\n        container: '#stats'\n      })\n    );\n  },\n  addClearAllWidget() {\n    this.search.addWidget(\n      instantsearch.widgets.clearAll({\n        container: '#clear-all',\n        templates: {\n          link: '<i class=\"fa fa-eraser\"></i> Clear all filters'\n        },\n        cssClasses: {\n          root: 'btn btn-block btn-default'\n        },\n        autoHideContainer: true\n      })\n    );\n  },\n  addBookWidget() {\n    this.search.addWidget(\n      instantsearch.widgets.refinementList({\n        container: '#books',\n        attributeName: 'book',\n        operator: 'or',\n        limit: 10\n      })\n    );\n  },\n  addChapterWidget() {\n    this.search.addWidget(\n      instantsearch.widgets.refinementList({\n        container: '#chapters',\n        attributeName: 'chapterName',\n        operator: 'or',\n        limit: 8\n      })\n    );\n  },\n  addHitsWidget() {\n    let hitsTemplate = $('#hitsTemplate').html();\n    let emptyTemplate = $('#noResultsTemplate').html();\n    this.search.addWidget(\n      instantsearch.widgets.hits({\n        container: '#hits',\n        hitsPerPage: 40,\n        templates: {\n          empty: emptyTemplate,\n          allItems: hitsTemplate\n        },\n        transformData: {\n          allItems: Sherlock.transformAllHits\n        }\n      })\n    );\n  },\n  addPaginationWidget() {\n    this.search.addWidget(\n      instantsearch.widgets.pagination({\n        container: '#pagination',\n        cssClasses: {\n          active: 'active'\n        },\n        labels: {\n          previous: '<i class=\"fa fa-angle-left fa-2x\"></i> Previous page',\n          next: 'Next page <i class=\"fa fa-angle-right fa-2x\"></i>'\n        },\n        showFirstLast: false\n      })\n    );\n  }\n};\n\nexport default Sherlock;\n","/* eslint-env mocha */\n\nimport expect from 'expect';\nimport Helper from '../lib/utils/helper.js';\n\ndescribe('Helper', () => {\n  describe('splitTextBySentence', () => {\n    it('should return the same text if below the limit', () => {\n      // Given\n      let input = 'Foo bar. Lorem Ipsum.';\n\n      // When\n      let actual = Helper.splitTextBySentence(input, 100);\n\n      // Then\n      expect(actual).toEqual([input]);\n    });\n    it('should not cut a sentence in half', () => {\n      // Given\n      let input = 'Foo bar. Lorem Ipsum.';\n\n      // When\n      let actual = Helper.splitTextBySentence(input, 5);\n\n      // Then\n      expect(actual[0]).toEqual('Foo bar.');\n      expect(actual[1]).toEqual('Lorem Ipsum.');\n    });\n    it('should not get confuses by several dots if sentence is small enough', () => {\n      // Given\n      let input = '(Being a reprint from the reminiscences of JOHN H. WATSON, M.D., late of the Army Medical Department.)';\n\n      // When\n      let actual = Helper.splitTextBySentence(input);\n\n      // Then\n      expect(actual).toEqual([input]);\n      //\n    });\n  });\n});\n"]}